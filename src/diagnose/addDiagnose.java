/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diagnose;


import config.dbConnector;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;


public class addDiagnose extends javax.swing.JFrame {
    
    private HashMap<String, Integer> patientMap = new HashMap<>();

  
    public addDiagnose() {
        initComponents();
       
    }
    
    private boolean updateCheck() {
    dbConnector dbc = new dbConnector();
    boolean duplicateExists = false;

    try {
        String query = "SELECT * FROM tbl_diagnose WHERE d_name = '" + symptom.getText() +
                       "' AND status = '" + stat.getText() + "' AND patient_id != '" + patientID.getText() + "'"
                + " AND treatment = '"+treat.getText()+"'";
      
        
        ResultSet rs = dbc.getData(query);

        if (rs.next()) {
           
            duplicateExists = true;
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
    }

    return duplicateExists;
}

    
    Color navColor = new Color(153,153,255);
    Color HoverColor = new Color(204,204,204);
    
    
    public String destination = "";
    File selectedFile;
    public String oldpath;
    public String path;
    
    private javax.swing.JComboBox<String> jComboBox1;
    
    public int FileExistenceChecker(String path){
      File file = new File(path);
      String fileName = file.getName();
      
      Path filePath = Paths.get("src/userimages", fileName);
      boolean fileExist = Files.exists(filePath);
    
      if(fileExist){
      return 1;
      }else {
      return 0;
      }
    }
    
    public static int getHeightFromWidth(String imagePath, int desiredWidth) {
        try {
      
            File imageFile = new File(imagePath);
            BufferedImage image = ImageIO.read(imageFile);
    
            int originalWidth = image.getWidth();
            int originalHeight = image.getHeight();
         
            int newHeight = (int) ((double) desiredWidth / originalWidth * originalHeight);
            
            return newHeight;
        } catch (IOException ex) {
            System.out.println("No image found!");
        }
        
        return -1;
    }
    
    public  ImageIcon ResizeImage(String ImagePath, byte[] pic, JLabel label) {
    ImageIcon MyImage = null;
        if(ImagePath !=null){
            MyImage = new ImageIcon(ImagePath);
        }else{
            MyImage = new ImageIcon(pic);
        }
        
    int newHeight = getHeightFromWidth(ImagePath, label.getWidth());

    Image img = MyImage.getImage();
    Image newImg = img.getScaledInstance(label.getWidth(), newHeight, Image.SCALE_SMOOTH);
    ImageIcon image = new ImageIcon(newImg);
    return image;
}
    
    public void imageUpdater(String existingFilePath, String newFilePath){
        File existingFile = new File(existingFilePath);
        if (existingFile.exists()) {
            String parentDirectory = existingFile.getParent();
            File newFile = new File(newFilePath);
            String newFileName = newFile.getName();
            File updatedFile = new File(parentDirectory, newFileName);
            existingFile.delete();
            try {
                Files.copy(newFile.toPath(), updatedFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                System.out.println("Image updated successfully.");
            } catch (IOException e) {
                System.out.println("Error occurred while updating the image: "+e);
            }
        } else {
            try{
                Files.copy(selectedFile.toPath(), new File(destination).toPath(), StandardCopyOption.REPLACE_EXISTING);
            }catch(IOException e){
                System.out.println("Error on update!");
            }
        }
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        addDiagnose = new javax.swing.JButton();
        updatePatient = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        symptom = new javax.swing.JTextField();
        stat = new javax.swing.JTextField();
        treat = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        select = new javax.swing.JComboBox<>();
        minimize = new javax.swing.JLabel();
        close = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        patientID = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(153, 255, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/patient.png"))); // NOI18N
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 120, 120));

        addDiagnose.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addDiagnose.setText("ADD DIAGNOSE");
        addDiagnose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addDiagnoseMouseClicked(evt);
            }
        });
        jPanel2.add(addDiagnose, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 140, 50));

        updatePatient.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        updatePatient.setText("UPDATE");
        updatePatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updatePatientMouseClicked(evt);
            }
        });
        jPanel2.add(updatePatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 100, 50));

        jButton1.setFont(new java.awt.Font("Microsoft New Tai Lue", 1, 14)); // NOI18N
        jButton1.setText("BACK");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 93, 34));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 180, 410));

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Select Patient:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 140, 50));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Status:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 140, 50));

        symptom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel3.add(symptom, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, 330, 50));

        stat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel3.add(stat, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 330, 50));

        treat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel3.add(treat, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 290, 330, 50));

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Treatment:");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 140, 50));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Patient Symptoms:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 140, 50));

        select.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        select.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectMouseClicked(evt);
            }
        });
        jPanel3.add(select, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 220, 40));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 560, 410));

        minimize.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        minimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minimize.setText("—");
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizeMouseExited(evt);
            }
        });
        jPanel1.add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 40, 40));

        close.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        close.setText("X");
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });
        jPanel1.add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, 40, 40));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Account ID:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 90, 30));

        patientID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        patientID.setText("ID");
        jPanel1.add(patientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 30, 30));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Patient Diagnose System");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 460, 70));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_minimizeMouseClicked

    private void minimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseEntered

    }//GEN-LAST:event_minimizeMouseEntered

    private void minimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_minimizeMouseExited

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        int a = JOptionPane.showConfirmDialog(null, "Do you want to Exit?");
        if (a == JOptionPane. YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_closeMouseClicked

    private void addDiagnoseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDiagnoseMouseClicked

           
                        dbConnector dbc = new dbConnector();
                         String currentDate = LocalDate.now().toString();

         
            JComboBox<String> patientDropdown = new JComboBox<>();
            HashMap<String, Integer> patientMap = new HashMap<>();

            try {
                ResultSet rs = dbc.getData("SELECT p_id, p_fname, p_lname FROM tbl_patients");
                while (rs.next()) {
                    String fullName = rs.getString("p_fname") + " " + rs.getString("p_lname");
                    int id = rs.getInt("p_id");
                    patientDropdown.addItem(fullName);
                    patientMap.put(fullName, id);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to load patients: " + e.getMessage());
                return;
            }

          
            int result = JOptionPane.showConfirmDialog(null, patientDropdown, 
                    "Select Patient", JOptionPane.OK_CANCEL_OPTION);

            if (result == JOptionPane.OK_OPTION) {
                String selectedPatient = (String) patientDropdown.getSelectedItem();
                String symptomText = symptom.getText().trim();
                String statusText = stat.getText().trim();
                String treatmentText = treat.getText().trim();

                if (symptomText.isEmpty() || statusText.isEmpty() || treatmentText.isEmpty() || selectedPatient == null) {
                    JOptionPane.showMessageDialog(null, "All fields including patient selection are required!");
                } else {
                    int patientId = patientMap.get(selectedPatient);

                    String query = "INSERT INTO tbl_diagnose (patient_id, d_name, status, treatment, date) " +
                                   "VALUES ('" + patientId + "', '" + symptomText + "', '" +
                                   statusText + "', '" + treatmentText + "', '" + currentDate + "')";

                    if (dbc.insertData(query)) {
                        JOptionPane.showMessageDialog(null, "Diagnosis added successfully!");
                        addPatientDiagnose apd = new addPatientDiagnose();
                        apd.setVisible(true);
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to add diagnose!");
                    }
                }
            }

    }//GEN-LAST:event_addDiagnoseMouseClicked

    private void updatePatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatePatientMouseClicked
            if (symptom.getText().isEmpty() || stat.getText().isEmpty() || treat.getText().isEmpty()) {
             JOptionPane.showMessageDialog(null, "All fields are required!");
         } else if (updateCheck()) {
             System.out.println("Duplicate exists");
         } else {
             try {
            dbConnector dbc = new dbConnector();
            String updateQuery = "UPDATE tbl_diagnose SET d_name = '" + symptom.getText().trim() +
                                 "', status = '" + stat.getText().trim() +
                                 "', treatment = '" + treat.getText().trim() +
                                 "' WHERE diagnose_id = '" + patientID.getText().trim() + "'";

            dbc.updateData(updateQuery);

            JOptionPane.showMessageDialog(null, "Diagnosis updated successfully!");
            addPatientDiagnose apd = new addPatientDiagnose();
            apd.setVisible(true);
            this.dispose();
            } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to update diagnosis: " + e.getMessage());
}
         }
    }//GEN-LAST:event_updatePatientMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        addPatientDiagnose apd = new addPatientDiagnose();
        apd.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1MouseClicked

    private void selectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectMouseClicked

            try {
             if (select != null) {
                 select.removeAllItems();
             }

             if (patientMap == null) {
                 patientMap = new HashMap<>();
             } else {
                 patientMap.clear();
             }
             dbConnector dbc = new dbConnector();
             ResultSet rs = dbc.getData("SELECT p_id, p_fname, p_lname FROM tbl_patients");
             if (rs != null) {
                 while (rs.next()) {
                     String fullName = rs.getString("p_fname") + " " + rs.getString("p_lname");
                     select.addItem(fullName);
                     patientMap.put(fullName, rs.getInt("p_id"));
                 }
             } else {
                 JOptionPane.showMessageDialog(null, "No data returned from database.");
             }
         } catch (Exception e) {
             JOptionPane.showMessageDialog(null, "Error loading patients: " + e.getMessage());
         }

     
    }//GEN-LAST:event_selectMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addDiagnose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addDiagnose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addDiagnose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addDiagnose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addDiagnose().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton addDiagnose;
    private javax.swing.JLabel close;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel minimize;
    public javax.swing.JLabel patientID;
    private javax.swing.JComboBox<String> select;
    public javax.swing.JTextField stat;
    public javax.swing.JTextField symptom;
    public javax.swing.JTextField treat;
    public javax.swing.JButton updatePatient;
    // End of variables declaration//GEN-END:variables
}
